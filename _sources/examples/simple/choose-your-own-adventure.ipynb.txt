{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Choose your own adventure\n",
    "\n",
    "A simple text-based game in the style of 80s adventure games in which you play a hungry corgi."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "from typing import Optional, Tuple\n",
    "\n",
    "from burr.core import action, Application, ApplicationBuilder, State, default, when\n",
    "from openai import OpenAI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# set your OpenAI API key to run the rest of the notebook\n",
    "import os\n",
    "os.environ[\"OPENAI_API_KEY\"] = ..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define actions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "@action(reads=[\"challenges\"], writes=[\"current_challenge\"])\n",
    "def start(state: State) -> State:\n",
    "    \"\"\"Load the first challenge as the current challenge\"\"\"\n",
    "    current_challenge = state[\"challenges\"][0]\n",
    "    return state.update(current_challenge=current_challenge)\n",
    "\n",
    "\n",
    "@action(reads=[\"current_challenge\"], writes=[\"attempts\"])\n",
    "def prompt_for_challenge(state: State) -> State:\n",
    "    \"\"\"Request user input to solve the current challenge\"\"\"\n",
    "    current_challenge = state[\"current_challenge\"]\n",
    "    user_response = input(f'{current_challenge}. What do you do?\\n $ ')\n",
    "    return state.append(attempts=user_response)\n",
    "\n",
    "\n",
    "@action(\n",
    "    reads=[\"attempts\", \"current_challenge\"],\n",
    "    writes=[\"challenge_solved\", \"what_happened\"],\n",
    ")\n",
    "def evaluate_attempt(state: State) -> State:\n",
    "    response = OpenAI().chat.completions.create(\n",
    "        model=\"gpt-4o-mini\",\n",
    "        messages=[\n",
    "            {\n",
    "                \"role\": \"system\",\n",
    "                \"content\": f\"\"\"You are evaluating responses for\n",
    "             whether they constitute solutions to the provided challenge in a text\n",
    "             based game, whose protagonist is a dog subject to the following limitations:\n",
    "             {RESTRICTIONS}. You respond ONLY with a json object containing two fields: \"solved\", which is a\n",
    "             boolean indicating whether the challenge was solved by the attempt, and \"what_happened\",\n",
    "             which is a string containing a brief narrative, written in the second person and addressed\n",
    "             to the player, of what happened during the protagonist's attempt\"\"\",\n",
    "            },\n",
    "            {\n",
    "                \"role\": \"user\",\n",
    "                \"content\": f\"The current challenge is: {state['current_challenge']} \"\n",
    "                f\"and the player's attempt is: {state['attempts'][-1]}\",\n",
    "            },\n",
    "        ],\n",
    "    )\n",
    "    content = response.choices[0].message.content\n",
    "    try:\n",
    "        json_result = json.loads(content)\n",
    "    except json.JSONDecodeError:\n",
    "        print(\"bad json: \", content)\n",
    "        json_result = {\n",
    "            \"solved\": False,\n",
    "            \"what_happened\": \"Not sure, really. I'm a dog. I can't read json. I can't read at all.\",\n",
    "        }\n",
    "\n",
    "    return state.update(\n",
    "        challenge_solved=json_result[\"solved\"],\n",
    "        what_happened=json_result[\"what_happened\"],\n",
    "    )\n",
    "\n",
    "\n",
    "@action(\n",
    "    reads=[\"challenge_solved\", \"current_challenge\", \"what_happened\"],\n",
    "    writes=[\"current_challenge\", \"did_win\"],\n",
    ")\n",
    "def maybe_progress(state: State) -> State:\n",
    "    print(\"What happened:\", state[\"what_happened\"])\n",
    "    if state[\"challenge_solved\"]:\n",
    "        if state[\"current_challenge\"] == challenges[-1]:\n",
    "            result = {\"did_win\": True}\n",
    "        else:\n",
    "            result = {\n",
    "                \"current_challenge\": challenges[challenges.index(state[\"current_challenge\"]) + 1]\n",
    "            }\n",
    "    else:\n",
    "        result = {\"current_challenge\": state[\"current_challenge\"]}\n",
    "    return state.update(**result)\n",
    "\n",
    "\n",
    "@action(reads=[\"challenges\"], writes=[])\n",
    "def win(state: State) -> State:\n",
    "    # get summary of actions taken from openai\n",
    "    print(\"you won\")\n",
    "    return state\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "RESTRICTIONS = \"\"\"You're a small corgi with short legs. You can't jump high,\n",
    "you can't run fast, you can't perform feats of athleticism in general\n",
    "to achieve any of your goals. You can't open doors, you can't use tools,\n",
    "you can't communicate with humans, you can't use your paws to manipulate\n",
    "objects, you can't use your mouth to manipulate objects, you can't use\n",
    "your mouth to communicate with humans\"\"\"\n",
    "\n",
    "\n",
    "challenges = [\n",
    "    \"There is a dish of dog food on the floor. You want to eat it\",\n",
    "    \"There is a dish of dog food on a table. You want to eat it\",\n",
    "    \"There is a dish of dog food in a locked car. You want to eat it\",\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_application(\n",
    "    app_id: Optional[str] = None,\n",
    "    storage_dir: Optional[str] = \"~/.burr\",\n",
    ") -> Application:\n",
    "    return (\n",
    "        ApplicationBuilder()\n",
    "        .with_state(did_win=False)\n",
    "        .with_actions(\n",
    "            start=start,\n",
    "            prompt_for_challenge=prompt_for_challenge,\n",
    "            evaluate_attempt=evaluate_attempt,\n",
    "            maybe_progress=maybe_progress,\n",
    "            win=win,\n",
    "        )\n",
    "        .with_transitions(\n",
    "            (\"start\", \"prompt_for_challenge\", default),\n",
    "            (\"prompt_for_challenge\", \"evaluate_attempt\", default),\n",
    "            (\"evaluate_attempt\", \"maybe_progress\", default),\n",
    "            (\"maybe_progress\", \"win\", when(did_win=True)),\n",
    "            (\"maybe_progress\", \"prompt_for_challenge\", default),\n",
    "        )\n",
    "        .with_entrypoint(\"start\")\n",
    "        .with_tracker(project=\"demo_corgi_adventure\", params={\"storage_dir\": storage_dir})\n",
    "        .with_identifiers(app_id=app_id)\n",
    "        .build()\n",
    "    )\n",
    "\n",
    "app = build_application()\n",
    "app.visualize(output_file_path=\"digraph\", include_conditions=True, view=False, format=\"png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "action, state, result = app.run(halt_after=[\"win\"])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
