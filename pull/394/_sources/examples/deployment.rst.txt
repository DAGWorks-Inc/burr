=============
âœˆ Deployment
=============

Burr is specifically meant to make getting your product in production easier and faster.
This section covers examples of getting Burr to production, as well as a brief overview of approaches/requirements.

To deploy Burr in production, you need to do three things:

1. Place your application in a web server
2. Provisioning infrastructure
3. Monitor your application in production (highly recommended, but not required)

Due to the large number of methods people have for deploying applications, we will not cover all of them here. That said,
we really appreciate contributions! Please `open an issue <https://github.com/DAGWorks-Inc/burr/issues/new?assignees=&labels=&projects=&template=feature_request.md&title=>`_ if there's an example you'd like, and :ref:`contribute back <contributing>` if you
have an example that would add to this guide. We have created a variety of issues with placeholders


--------------------
Burr in a web server
--------------------

We largely use `fastAPI <https://fastapi.tiangolo.com/>`_ as our web server, but Burr can work with any python-friendly server framework
(`django <https://www.djangoproject.com>`_, `flask <https://flask.palletsprojects.com/>`_, etc...).

To run Burr in a FastAPI server, see the following examples:

- `Human in the loop FastAPI server <https://github.com/DAGWorks-Inc/burr/tree/main/examples/web-server>`_ (`TDS blog post <https://towardsdatascience.com/building-an-email-assistant-application-with-burr-324bc34c547d>`__ )
- `OpenAI-compatible agent with FastAPI <https://github.com/DAGWorks-Inc/burr/tree/main/examples/openai-compatible-agent>`_
- `Streaming server using SSE + FastAPI <https://github.com/DAGWorks-Inc/burr/tree/main/examples/streaming-fastapi>`_  (`TDS blog post <https://towardsdatascience.com/how-to-build-a-streaming-agent-with-burr-fastapi-and-react-e2459ef527a8>`__ )
- `Use typed state with Pydantic + FastAPI <https://github.com/DAGWorks-Inc/burr/tree/main/examples/typed-state>`_


Connecting to a database
------------------------

To connect Burr to a database, you can use one of the provided persisters, or build your own:

- :ref:`Documentation on persistence <state-persistence>`
- :ref:`Set of available persisters <persistersref>`
- `Simple chatbot intro with persistence to SQLLite <https://github.com/DAGWorks-Inc/burr/blob/main/examples/simple-chatbot-intro/notebook.ipynb>`_

-------------------------------------
Provisioning Infrastructure/Deploying
-------------------------------------

Burr is not opinionated about the method of deployment/cloud one uses. Any method that can run a python server will work
(AWS, vercel, etc...). Note we aim to have more examples here -- see `this issue <https://github.com/DAGWorks-Inc/burr/issues/390>`_ to track!

- `Deploying Burr in an AWS lambda function <https://github.com/DAGWorks-Inc/burr/tree/main/examples/deployment/aws/lambda>`_


------------------------
Monitoring in Production
------------------------

Burr's telemetry UI is meant both for debugging and running in production. It can consume `OpenTelemetry traces <https://burr.dagworks.io/reference/integrations/opentelemetry/>`_,
and has a suite of useful capabilities for debugging Burr applications.

It has two (current) implementations:

1. `Local (filesystem) tracking <https://burr.dagworks.io/concepts/tracking/>`_ (default, for debugging or lower-scale production use-cases with a distributed file-system)
2. `S3-based tracking <https://github.com/DAGWorks-Inc/burr/blob/main/burr/tracking/server/s3/README.md>`_ (meant for production use-cases)

Which each come with an implementation of data storage on the server.

To deploy these in production, you can follow the following examples:

1. `Burr + FastAPI + docker <https://github.com/mdrideout/burr-fastapi-docker-compose>`_ by `Matthew Rideout <https://github.com/mdrideout>`_. This contains a sample API + UI + tracking server all bundled in one!
2. `Docker compose + nginx proxy <https://github.com/DAGWorks-Inc/burr/tree/main/examples/email-assistant#running-the-ui-with-email-server-backend-in-a-docker-container>`_ by `Aditha Kaushik <https://github.com/97k>`_ for the email assistant example, demonstrates running the docker image with the tracking server.

We also have a few issues to document deploying Burr's monitoring system in production:

- `deploy on AWS <https://github.com/DAGWorks-Inc/burr/issues/391>`_
- `deploy on GCP <https://github.com/DAGWorks-Inc/burr/issues/392>`_
- `deploy on Azure <https://github.com/DAGWorks-Inc/burr/issues/393>`_

We expect to develop this page significantly over time -- Burr will soon have more builtin deployment tooling/ways to make it easier
to get your app to production!
